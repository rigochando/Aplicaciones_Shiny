shiny::runApp()
runApp()
install.packages("boxSidebar")
install.packages("boxSidebar")
runApp()
runApp()
runApp()
?Handsontable
?withMathJax
?showModal
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(plotly)
library(rhandsontable)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Indice de productivid"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(width = 4,
h3(" "),
selectInput("PI_cor","Methods", c("Darcy (PPS)", "Voguel",
"Composite")),
# &mu;
conditionalPanel(condition = "input.PI_cor == 'Darcy (PPS)'",
column (6,
numericInput("PI_py","Reservoir pressure (psi)", value = ""),
numericInput("PI_ko","Permeability (md)", value = ""),
numericInput("PI_vo", "Oil viscosity (cp)", value = ""),
numericInput("PI_bo", "Oil fomation volume factor (bbl/STB)", value = ""),
checkboxInput("Darcy_PPS_vogel" ,"Vogel below Pb (bubble pressure)"),
conditionalPanel(condition = "input.Darcy_PPS_vogel == 1",
numericInput("PI_Pb", "Bubble point pressure (psi)", value = "")
)
),
column (6,
numericInput("PI_re", "Drainage radius (ft)", value = ""),
numericInput("PI_rw", "Wellbore radius (ft)", value = ""),
numericInput("PI_h", "Oil column thickness (ft)", value = ""),
numericInput("PI_S", "skin", value = ""),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br()
)#,
),
conditionalPanel(condition = "input.PI_cor == 'Composite'",
column (6,
numericInput("PI_py2_Com","Reservoir pressure (psi)", value = ""),
numericInput("PI_Pb2_Com","Bubble point pressure (psi)", value = "")
),
column (6,
numericInput("PI_Q_Com", "Test Rate (stb/day)", value = ""),
numericInput("PI_Pwf_Com", "Flowing Bottom-hole pressure (psi)", value = ""),
numericInput("Fw_Com", "Water Fraction", value = ""),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br()
)#,
),
conditionalPanel(condition = "input.PI_cor == 'Voguel'",
column (6,
numericInput("PI_py2","Reservoir pressure (psi)", value = ""),
numericInput("PI_Pb2","Bubble point pressure (psi)", value = "")
),
column (6,
numericInput("PI_Q", "Test Rate (stb/day)", value = ""),
numericInput("PI_Pwf", "Flowing Bottom-hole pressure (psi)", value = ""),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br()
)#,
),
actionButton("calculatePI", "Calcular") ,
actionButton("LoadExPI","Load Example") ,
actionButton("EquePI", "View Models Information"),
numericInput("PI_PI", "Productivity index (stb/day-psi)", value = "")
# column (12,
#         br(),
#         br(),
#
#
#         numericInput("PI_Qoc", "Critical flow rate (bbl/d)", value = "")
# )
),
mainPanel(width = 8,
col(5,
plotlyOutput("plot_PI", height = "70vh")
),
col(5,
rHandsontableOutput("tablePI")
),
col(2,
numericInput("Data_points_IP", "Number of data Points", value = 10),
selectInput("Plot_Type_IP","Plot Type",
c("Line", "Points", "Line - Points"), selected = "Line")
)
)
)
)
# Define server
server <- function(input, output) {
vPI <- reactiveValues(PI = NULL, pwf = NULL)
#Funciones
#Darcy_PSS
Darcy_PSS <- function(py,k,h,Bo,viso,re,rw,S, Pb = 0, data_P = 10){
if(Pb == 0){
J = (k*h)/(141.2*Bo*viso*(log(re/rw)-3/4+S))
qomax <- J*py
q <- seq(0,qomax, length.out = data_P)
Pwf <- py -q/J
Pwf_res <- data.frame(qo = q, Pwf = Pwf)
Results <- list(PI = J, Pwf_res = Pwf_res)
}else{
J <- (k*h)/(141.2*Bo*viso*(log(re/rw)-3/4+S))
#J
qb <- (J)*(py-Pb)
qv <- J*Pb/1.8
pwf <- seq(0,py, length.out = data_P)
qo <- ifelse(pwf >= Pb, J*(py-pwf), qb + qv*(1-0.2*(pwf/Pb)-0.8*(pwf/Pb)^2))
Pwf_res <- data.frame(qo = qo, Pwf = pwf)
Results <- list(PI = J, Pwf_res = Pwf_res)
}
return(Results)
}
#Funcion Vogel
vogel <- function(py, Pb, q, pwf, data_P = 10){
if(pwf > Pb){
J <- q/(py-pwf)
}else{
J <- q/((py-Pb) + (Pb/1.8)*(1-0.2*(pwf/Pb)-0.8*(pwf/Pb)^2))
}
qb <- (J)*(py-Pb)
qv <- J*Pb/1.8
pwf <- seq(0,py, length.out = data_P)
qo <- ifelse(pwf >= Pb, J*(py-pwf), qb + qv*(1-0.2*(pwf/Pb)-0.8*(pwf/Pb)^2))
Pwf_res <- data.frame(qo = qo, Pwf = pwf)
Results <- list(PI = J, Pwf_res = Pwf_res)
return(Results)
}
#Funcion Vogel - composite
A_IPR_c <- function(Pwf,Fw,Pb,Py){
A <- (Pwf+0.125*(1-Fw)*Pb-Fw*Py)/(0.125*(1-Fw)*Pb)
return(A)
}
B_IPR_c <- function(Fw,Pb,J){
B <- Fw/(0.125*(1-Fw)*Pb*J)
return(B)
}
C_IPR_c <- function(Pwf,Fw,Pb,Py,J,qomax,qb){
A <- (Pwf+0.125*(1-Fw)*Pb-Fw*Py)/(0.125*(1-Fw)*Pb)
B <- Fw/(0.125*(1-Fw)*Pb*J)
C <- 2*A*B+(80)/(qomax-qb)
return(C)
}
D_IPR_c <- function(Py,Pwf,Fw,Pb,Pr,J,qomax,qb){
A <- (Pwf+0.125*(1-Fw)*Pb-Fw*Py)/(0.125*(1-Fw)*Pb)
D <- A^2-80*(qb/(qomax-qb))-80
return(D)
}
IP_composite <- function(Py, Pb, q, pwf, Fw ,data_P = 10){
if(pwf > Pb){
J <- q/(Py-pwf)
qb <- J*(Py-Pb)
qomax <- qb+(J*Pb)/1.8
}else{
A <-  1-0.2*(pwf/Pb)-0.8*(pwf/Pb)^2
J <- q/((1-Fw)*(Py -Pb + (Pb*A)/1.8)+Fw*(Py - pwf))
qb <- J*(Py-Pb)
qomax <- qb+(J*Pb)/1.8
}
CD <- (1-Fw)*0.125*Pb*(sqrt(81-80*(0.999*qomax-qb)/(qomax-qb))-1)+
Fw*(Py-(0.999*qomax)/J)-Fw*(Py-qomax/J)
CG <- 0.001*qomax
tana <- CG/CD
tanb <- 1/tana
qtmax <- qomax+Fw*(Py-qomax/J)*tana
PwfG <- Fw*(Py-qomax/J)
pwf <- seq(0,Py, length.out = data_P)
A <- A_IPR_c(pwf,Fw,Pb,Py)
B <- B_IPR_c(Fw,Pb,J)
C <- C_IPR_c(pwf,Fw,Pb,Py,J,qomax,qb)
D <- D_IPR_c(Py, pwf,Fw,Pb,Py,J,qomax,qb)
qt <- ifelse(pwf >= Pb, J*(Py-pwf),
ifelse(pwf >= PwfG & pwf < Pb,
ifelse(rep(B, length(pwf)) != 0 ,
(-C+sqrt(C^2-4*B^2*D))/(2*B^2), -D/C),
ifelse(pwf < PwfG, (PwfG+qomax*tanb-pwf)/tanb  , 0)))
Pwf_res <- data.frame(qo = qt, Pwf = pwf)
Results <- list(PI = J, Pwf_res = Pwf_res)
return(Results)
}
#Boton calcular
observeEvent(input$calculatePI, {
if(input$PI_cor == "Darcy (PPS)"){
py <- input$PI_py
k <- input$PI_ko
h <- input$PI_h
Bo <- input$PI_bo
viso <- input$PI_vo
re <- input$PI_re
rw <- input$PI_rw
S <- input$PI_S
#hp <- input$wC_hp
if(input$Darcy_PPS_vogel == 1){
Pb <- input$PI_Pb
Results <-  Darcy_PSS(py,k,h,Bo,viso,re,rw,S, Pb, data_P =input$Data_points_IP)
}else{
Results <-  Darcy_PSS(py,k,h,Bo,viso,re,rw,S, data_P =input$Data_points_IP)
}
vPI$pwf <- Results
}
if(input$PI_cor == "Voguel"){
py <- input$PI_py2
Pb <- input$PI_Pb2
q <- input$PI_Q
pwf <- input$PI_Pwf
Results <-  vogel(py,Pb, q, pwf, data_P =input$Data_points_IP)
vPI$pwf <- Results
}
if(input$PI_cor == "Composite"){
py <- input$PI_py2_Com
Pb <- input$PI_Pb2_Com
q <- input$PI_Q_Com
pwf <- input$PI_Pwf_Com
Fw <- input$Fw_Com
Results <-  IP_composite(py,Pb, q, pwf, Fw, data_P =input$Data_points_IP)
vPI$pwf <- Results
}
updateNumericInput(session,"PI_PI", "Productivity index (stb/day-psi)", value = Results[[1]])
})
#Grafico IP
output$plot_PI <- renderPlotly({
if (!is.null(vPI$pwf)){
data <- as.data.frame(vPI$pwf[2])
#data2 <- vADL$dataADLdatos
colnames(data) <- c("Qo", "Pwf")
if(input$Plot_Type_IP == "Line") type_plot <- "lines"
if(input$Plot_Type_IP == "Points") type_plot <- "markers"
if(input$Plot_Type_IP == "Line - Points") type_plot <- "lines+markers"
p <- plot_ly(data, x = ~Qo, y = ~Pwf, type = 'scatter', mode = type_plot, name = ~"PI") %>%
layout(xaxis = list(title = "Qo"), yaxis = list(title = "Pwf"),
legend = list(orientation = "h",xanchor = "center", x = 0.5, y = -0.25))
}else{
p <- ggplot() +
xlab("Oil Rate (bbl/d)") +
ylab("Pwf") +
scale_x_continuous(limits = c(0, 1000)) +
scale_y_continuous(limits = c(0, 500))
p <- ggplotly(p)
}
p
})
#Load examples button
observeEvent(input$LoadExPI,{
if(input$PI_cor == "Darcy (PPS)"){
updateCheckboxInput(session,"Darcy_PPS_vogel" ,"Vogel below Pb (bubble pressure)", value = TRUE)
updateNumericInput(session,"PI_py","Reservoir pressure (psi)", value = 5651)
updateNumericInput(session,"PI_ko","Permeability (md)", value = 8.2)
updateNumericInput(session,"PI_vo", "Oil viscosity (cp)", value = 1.7)
updateNumericInput(session,"PI_bo", "Oil fomation volume factor (bbl/STB)", value = 1.1)
updateNumericInput(session,"PI_re", "Drainage radius (ft)", value = 2980)
updateNumericInput(session,"PI_rw", "Wellbore radius (ft)", value = 0.328)
updateNumericInput(session,"PI_h", "Oil column thickness (ft)", value = 53)
updateNumericInput(session,"PI_S", "skin", value = 0)
updateNumericInput(session,"PI_Pb", "Bubble point pressure (psi)", value = 5651)
}
if(input$PI_cor == "Voguel"){
updateNumericInput(session,"PI_py2","Reservoir pressure (psi)", value = 5000)
updateNumericInput(session,"PI_Pb2","Bubble point pressure (psi)", value = 3000)
updateNumericInput(session,"PI_Q", "Test Rate (stb/day)", value = 900)
updateNumericInput(session,"PI_Pwf", "FLowing Bottom-hole pressure (psi)", value = 2000)
}
if(input$PI_cor == "Composite"){
updateNumericInput(session,"PI_py2_Com","Reservoir pressure (psi)", value = 2550)
updateNumericInput(session,"PI_Pb2_Com","Bubble point pressure (psi)", value = 2100)
updateNumericInput(session,"PI_Q_Com", "Test Rate (stb/day)", value = 500)
updateNumericInput(session,"PI_Pwf_Com", "FLowing Bottom-hole pressure (psi)", value = 2300)
updateNumericInput(session,"Fw_Com", "Water Fraction", value = 0.50)
}
})
output$tablePI = renderRHandsontable({
if (!is.null(vPI$pwf)){
data <- as.data.frame(vPI$pwf[2])
colnames(data) <- c("Q (stb/day)", "Pwf (psi)")
rhandsontable(data, stretchH = "all")
}
})
#Ayuda Indice de productividad
Func_Info_PI <- function(failed = FALSE) {
modalDialog(
uiOutput("Info_PI"),
size = "l"
#includeHTML("Formulas_Rs.html")
)
}
observeEvent(input$EquePI,{
showModal(Func_Info_PI())
})
output$Info_PI <- renderUI({
withMathJax(includeMarkdown(file.path("formulas", "Info_PI.Rmd")))
})
}
ui
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("Indice de productivid"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(width = 4,
h3(" "),
selectInput("PI_cor","Methods", c("Darcy (PPS)", "Voguel",
"Composite")),
# &mu;
conditionalPanel(condition = "input.PI_cor == 'Darcy (PPS)'",
column (6,
numericInput("PI_py","Reservoir pressure (psi)", value = ""),
numericInput("PI_ko","Permeability (md)", value = ""),
numericInput("PI_vo", "Oil viscosity (cp)", value = ""),
numericInput("PI_bo", "Oil fomation volume factor (bbl/STB)", value = ""),
checkboxInput("Darcy_PPS_vogel" ,"Vogel below Pb (bubble pressure)"),
conditionalPanel(condition = "input.Darcy_PPS_vogel == 1",
numericInput("PI_Pb", "Bubble point pressure (psi)", value = "")
)
),
column (6,
numericInput("PI_re", "Drainage radius (ft)", value = ""),
numericInput("PI_rw", "Wellbore radius (ft)", value = ""),
numericInput("PI_h", "Oil column thickness (ft)", value = ""),
numericInput("PI_S", "skin", value = ""),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br()
)#,
),
conditionalPanel(condition = "input.PI_cor == 'Composite'",
column (6,
numericInput("PI_py2_Com","Reservoir pressure (psi)", value = ""),
numericInput("PI_Pb2_Com","Bubble point pressure (psi)", value = "")
),
column (6,
numericInput("PI_Q_Com", "Test Rate (stb/day)", value = ""),
numericInput("PI_Pwf_Com", "Flowing Bottom-hole pressure (psi)", value = ""),
numericInput("Fw_Com", "Water Fraction", value = ""),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br()
)#,
),
conditionalPanel(condition = "input.PI_cor == 'Voguel'",
column (6,
numericInput("PI_py2","Reservoir pressure (psi)", value = ""),
numericInput("PI_Pb2","Bubble point pressure (psi)", value = "")
),
column (6,
numericInput("PI_Q", "Test Rate (stb/day)", value = ""),
numericInput("PI_Pwf", "Flowing Bottom-hole pressure (psi)", value = ""),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br()
)#,
),
actionButton("calculatePI", "Calcular") ,
actionButton("LoadExPI","Load Example") ,
actionButton("EquePI", "View Models Information"),
numericInput("PI_PI", "Productivity index (stb/day-psi)", value = "")
# column (12,
#         br(),
#         br(),
#
#
#         numericInput("PI_Qoc", "Critical flow rate (bbl/d)", value = "")
# )
),
mainPanel(width = 8,
col(5,
plotlyOutput("plot_PI", height = "70vh")
),
col(5,
rHandsontableOutput("tablePI")
),
col(2,
numericInput("Data_points_IP", "Number of data Points", value = 10),
selectInput("Plot_Type_IP","Plot Type",
c("Line", "Points", "Line - Points"), selected = "Line")
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
